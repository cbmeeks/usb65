/*
    (C) 2011 Andre Fachat

    This file is part of the 6502 USB Host Driver.

    The 6502 USB Host Driver is free software: you can redistribute it and/or modify
    it under the terms of the Lesser GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The 6502 USB Host Driver is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Lesser GNU General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with the 6502 USB Host Driver. If not, see <http://www.gnu.org/licenses/>.
*/

#define	DEBUG
#undef	DEBUG_POLL
#define	DEBUG_HW

printc=$ffd2

	.(

#include "msg.i65"

	.word $0401
	.word eol
	.word 10
	.byt $9e, "1040"
	.byt 0
eol	.word 0
	.dsb 1040-*, $00
	jmp start


	.zero
; print routine pointer
ZPRINTPTR	.word 0		;=$1f
; device driver pointer
ZUDEVPTR1	.word 0		;=$1f
; general pointer within USB code
ptr		.word 0		;=$11
; debug code pointer (to save inline string address)
dbg_ptr		.word 0		;=$b1

	.text

/* current screen column for debug, so we can enter cr when appropriate */
#define	SCREENCOL	$c6

#include "msg.a65"
#include "debug.a65"
#include "usb.a65"

start	.(

	lda #14
	jsr printc		; lower/upper case mode

	ldy #MSG_COPYRIGHT
	jsr print

	jsr usb_init
	bcc hwfound
	tay			; error number
	jsr print
	rts
hwfound
	jsr prversion

	lda #0
	sta $a7			; crude method to enable cursor flash
poll
	jsr usb_polldev
	bcs error
	lda #1
	jsr pause
	; no device attached, so just wait until RUN/STOP
	jsr $f335	
	bne poll
	rts
error
	ldy #ERR_DEVICE
	jsr printx
	rts	
	.)

waitkey .(
	ldy #MSG_WAIT_KEY
	jsr print
l	jsr $f335
	bne l
	rts
	.)

prversion .(
	tax
	bne v15
	ldy #MSG_V12
	.byt $2c
v15	ldy #MSG_V15
	jmp print
	.)

VCOUNT=$99

; pause a given number of vertical screen retraces (1/50th seconds)
; in AC has number of frames (retraces)
pause   .(
	tax
	inx           ; full retraces, so one more border between traces
p0	lda VCOUNT
p1	cmp VCOUNT
	beq p1
	dex
	bne p0
	rts
	.)

; callback from the keyboard code
; ac contains key from keyboard (in PETSCII)
usb_kbd_rx_key_cb .(
	inc $a7
	jsr printc
	dec $a7
	rts
	.)
	

; callback from the mouse code
; ac contains buttons
; x/y contain x resp. y displacement
&usb_mouse_rx_cb .(
	inc $a7

	and #$07
	beq nom
	pha 
	lda #"M"
	jsr printc
	pla
	jsr hexout
nom	
	txa
	beq nox
	bmi left
right	lda #$1d
	jsr printc
	dex
	bne right
	beq nox
left	lda #$9d
	jsr printc
	inx
	bne left
nox
	tya
	beq noy
	bmi up
down	lda #$11
	jsr printc
	dey
	bne down
	beq noy
up	lda #$91
	jsr printc
	iny
	bne up
noy
	dec $a7
	rts
	.)

	.)

